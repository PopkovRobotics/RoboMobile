#pragma once
// Файлы программы
#include "Lines.hpp"
#include "Timer.hpp"
#include "Config.hpp"

#define KOEF       -0.389       // Коэффициент для вычесление зелёной стойки знака
#define BIAS        312.5       // Смещение для вычесления области для нахождения
                                // зелёной стойки знака
#define VALUE       1620
#define SIGN_VALUE  1520

/*
 * Функция реализует "алгоритм жука" для поиска и описания контуров изображения.
 * Функция возвращает массив с минимальной обрамляющей контуров.
 * image - ссылка на параметр типа Mat, изображения для поиска контуров,
 * roi - параметр типа Rect, координаты области, в которой введётся поиск контуров,
 * min_rect - параметр типа Point, минимальнй размер контура. 
 * Если найденный контур маньше размера min_rect, то минимальная обрамляющая контура 
 * не добавляется в вектор.
 */
std::vector<Rect> findRects(Mat image, Rect roi, Point min_rect, uint8_t treshold);
/*
 * Функция вычесляет процентное соотношение красной, жёлтой, синий, черной
 * компоненты в области.
 * image - ссылка на параметр типа Mat, изображение, на котором вычесляем соотношение.
 */
std::vector<float> getPercent(Mat& image);
/*
 * Функция для создания потока нахождение дорожных знаков на изображение.
 * ptr - указатель на параметр типа void, для получения основной информации о модели. 
 */
void* RecognitionSignFnc(void* ptr);
