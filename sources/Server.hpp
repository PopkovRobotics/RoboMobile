#pragma once 
// Библиотеки C++
#include <unistd.h>
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
// Файлы программы
#include "Config.hpp"

// Перечесление, которое хранит тип возможных данных отправляемых на клиент 
enum DataType{
   None_t = 0,
   Image_t,				// Изображение с камеры
   Engine_t,			// Структура, которая хранит информацию о движение модели
   Line_t,				// Информацию о направляющей линии
   FrameSize_t,			// Размер кадра
   Sign_t,				// Массив с информацией о распознанных знаков
};

// Класс реализует сервер для передачи данных на клиент
class Server{
private:
    uint32_t sockfd,		// sockfd - сокет для создания сервера
        new_sockfd;			// new_sockfd - сокет для отправки сообщений на клиент
	uint32_t server_port;	// server_port - порт, на котором находится сервер
    bool connected;			// connected - статус подключения клиента к серверу

	// Функция запсукает сервер
    void start();
	/*
	 * Функция отправляет значение, которое хранит указатель source на клиент.
	 * source - указатель типа void, отправляемая информация. 
	 * size - параметр типа size, размер отправляемых данных в байтах.
	 */
	bool sendMsg(void* source, size_t size);

public:
	/*
	 * Конструктор класса.
	 * system - ссылка на параметр типа System, для получения порта сервера.
	 */
	Server(System& system);
	// Функция останаливает работу сервера
	void stop();
	/*
	 * Функция отправляет команду на клиент в формате:
	 * тип команды, размер команды, команды.
	 * type - параметр типа DataType, тип команды (см. Перечисление DataType).
	 * data_size - параметр типа uint32_t, размер отправляемой команды.
	 * ptr - указатель типа void, отправляемая информация.
	 */
	void sendCmd(DataType type, uint32_t data_size, void *ptr);
	// Функция возвращает статус подключения клиента к серверу
    bool clientState();

};

/*
 * Функция для создания потока сервера.
 * ptr - указатель на параметр типа void, для получения основной информации о модели. 
 */
void* ServerFnc(void *ptr);
